
* ~Makefile~, valgrind
:PROPERTIES:
:header-args: :tangle Makefile
:END:
** directory setup
some basic variables.
#+BEGIN_SRC makefile
BIN_DIR        = bin
EXAMPLE_DIR    = examples

ORG_BASE_DIR   = org
ORG_CLASS_DIR  = $(ORG_BASE_DIR)/class
ORG_DRIVER_DIR = $(ORG_BASE_DIR)/driver

SRC_BASE_DIR   = src
SRC_CLASS_DIR  = $(SRC_BASE_DIR)/class
SRC_DRIVER_DIR = $(SRC_BASE_DIR)/driver

THIRD_PARTY    = third-party
THIRD_PARTY_INCLUDE = $(THIRD_PARTY)/include
THIRD_PARTY_LIB = $(THIRD_PARTY)/lib

EXEC=$(BIN_DIR)/run
#+END_SRC
It is probably sloth, but I prefer to use boost's command-line options rather than parsing the command line myself.
#+BEGIN_SRC makefile
BOOST_ROOT = /usr/local/opt/boost
BOOST_INCS = $(BOOST_ROOT)/include/boost/include
BOOST_LIBS = $(BOOST_ROOT)/lib/
#+END_SRC
** compiler setup
#+BEGIN_SRC makefile
CC = g++-7
CFLAGS += -g -std=c++11
LDFLAGS += -L$(BOOST_LIBS) -lboost_program_options
LDFLAGS += -L$(THIRD_PARTY_LIB) -ltinyxml2
#+END_SRC
** tangle command
#+BEGIN_SRC makefile 
SPON_BASE_DIR_BATCH_MODE = --eval "(setq spon-filt-base-dir (locate-dominating-file buffer-file-name \".dir-locals.el\"))"
TANGLE_BATCH_SUFFIX = --batch -l org $(SPON_BASE_DIR_BATCH_MODE) -f org-babel-tangle --kill

#+END_SRC
** dependencies, 
#+BEGIN_SRC makefile
DEPS += -I$(BOOST_INCS)
DEPS += -I$(SRC_CLASS_DIR)
DEPS += -I$(THIRD_PARTY_INCLUDE)
#+END_SRC
** test command
#+BEGIN_SRC makefile 
TEST_COMMAND_1 = $(EXEC) \
	-c examples/filters/low-pass-00.xml \
	-i examples/inputs/sine_sweep.raw \
	-o examples/outputs/sine_sweep_filt.raw\
#+END_SRC
** targets
*** default
#+BEGIN_SRC makefile
all: filt-main noise-main
#+END_SRC
*** run
Sometimes I like to just type ~make run~, rather than typing ~make~ and then calling the executable manually
#+BEGIN_SRC makefile
run: filt-main
	$(TEST_COMMAND_1)
#+END_SRC
*** calling valgrind
Sometimes I like to be able to rebuild and call valgrind without remembering how to set it up. This is obviously a very simple setup for valgrind, but it is easy to make it more interesting.
#+BEGIN_SRC makefile
grind: main
	valgrind -v $(TEST_COMMAND_1) 
#+END_SRC
*** drivers
**** filter driver
#+BEGIN_SRC makefile
filt-main: $(SRC_CLASS_DIR)/cb.h $(SRC_CLASS_DIR)/filt.h $(SRC_DRIVER_DIR)/filt-main.cc
	$(CC) $(CFLAGS) $(DEPS) $? -o $(EXEC) $(LDFLAGS)
#+END_SRC
**** noise driver
#+BEGIN_SRC makefile
noise-main: $(SRC_CLASS_DIR)/noise.h $(SRC_DRIVER_DIR)/noise-main.cc
	$(CC) $(CFLAGS) $(DEPS) $? -o $(BIN_DIR)/noise-test $(LDFLAGS)
#+END_SRC
*** tangling
**** drivers
#+BEGIN_SRC makefile 
$(SRC_DRIVER_DIR)/%-main.cc: $(ORG_CLASS_DIR)/spon-%.org
	emacs $< $(TANGLE_BATCH_SUFFIX) # --batch -f org-babel-tangle --kill
#+END_SRC
**** classes
#+BEGIN_SRC makefile 
$(SRC_CLASS_DIR)/%.h: $(ORG_CLASS_DIR)/spon-%.org
	emacs $< $(TANGLE_BATCH_SUFFIX) # --batch -f org-babel-tangle --kill
#+END_SRC
*** third-party
**** generic target
#+BEGIN_SRC makefile 
third-party: tiny-xml gtest
clean-third-party:
	rm -rf third-party/include/*
	rm -rf third-party/lib/*
#+END_SRC
**** sub-targets
***** ~tiny-xml~
#+BEGIN_SRC makefile 
tiny-xml:
	cd third-party/repos/tinyxml2        && \
	$(CC) -c -o tinyxml2.o tinyxml2.cpp  && \
	ar cr libtinyxml2.a tinyxml2.o       && \
	cp libtinyxml2.a ../../lib           && \
	cp tinyxml2.h ../../include
#+END_SRC
***** ~gtest~
#+BEGIN_SRC makefile
GTEST_CMAKE_FLAGS = -DCMAKE_CXX_COMPILER="$(CC)" -DCMAKE_CXX_FLAGS="-std=c++11" -stdlib=libc++
gtest:
	cd third-party/repos/googletest               && \
	cmake $(GTEST_CMAKE_FLAGS) .                  && \
	make                                          && \
	cp -a googletest/include/gtest ../../include  && \
	cp googlemock/gtest/libgtest.a ../../lib      && \
	cp googlemock/gtest/libgtest_main.a ../../lib

#+END_SRC
*** clean
#+BEGIN_SRC makefile
clean:
	rm -f $(EXEC)
#+END_SRC

* running in gdb (in ~emacs~)
:PROPERTIES:
:header-args: :results none
:END:
#+BEGIN_SRC elisp x1
(gdb "gdb -i=mi bin/run")
#+END_SRC

and then, at the ~gdb~ prompt, source the file ~gdb_script~ below by typing 

#+BEGIN_SRC sh
source ../src/gdb-scripts/<name-of-script>
#+END_SRC

*** gdb scripts
**** observing the filtering / convolution
#+BEGIN_SRC sh :tangle (concat spon-filt-base-dir "gdb-scripts/watch-filter")
# b Filt<double>::from_xmbl(tinyxml2::XMLElement*)
# b Filt<double>::pull(double*, size_t)
b main.cc:71
# b Filt<double>::pull(double*, unsigned long)
run -i ../examples/inputs/impulse.raw  -o ../examples/outputs/impulse_filt.raw -c ../examples/filters/low-pass-00.xml
#+END_SRC

* COMMENT Footer
# Local Variables:
# eval: (setq spon-base-dir default-directory)
# eval: (setq spon-src-dir (expand-file-name "src/"))
# eval: (local-set-key (kbd "<f5>") (lambda () (cd spon-base-dir) (interactive) (shell-command "make clean && make &")))
# End:
